generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  name             String?
  password         String
  role             Role              @default(USER)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  aiApiKeys        AIApiKey[]
  aiPrompts        AIPrompt[]
  aiUsageLogs      AIUsageLog[]
  dokumenDiupload  DokumenProgram[]
  laporanDibuat    LaporanProgres[]
  programDitangani Program[]
  ProgramProposal  ProgramProposal[]
}

model ProgramProposal {
  id                    String         @id @default(cuid())
  judul                 String
  latarBelakang         String
  tujuanProgram         String
  status                ProposalStatus @default(DRAFT)
  createdById           String
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  estimasiAnggaran      Decimal        @db.Decimal(15, 2)
  indikatorKeberhasilan String
  jumlahPenerimaManfaat Int
  lokasiDesa            String?
  lokasiKabupaten       String
  lokasiKecamatan       String
  perkiraanMulai        DateTime
  perkiraanSelesai      DateTime
  pilar                 TjslPillar
  ringkasan             String?
  targetPenerimaManfaat String
  program               Program?
  createdBy             User           @relation(fields: [createdById], references: [id])
}

model Program {
  id                    String           @id @default(cuid())
  judul                 String
  pilar                 TjslPillar
  lokasiKabupaten       String
  lokasiKecamatan       String
  latarBelakang         String
  tujuanProgram         String
  indikatorKeberhasilan String
  targetPenerimaManfaat String
  jumlahPenerimaManfaat Int
  anggaranFinal         Decimal          @db.Decimal(15, 2)
  tanggalMulaiFinal     DateTime
  tanggalSelesaiFinal   DateTime
  penanggungJawabId     String
  status                ProgramStatus    @default(BERJALAN)
  proposalAsalId        String           @unique
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  dokumenPenting        DokumenProgram[]
  laporanProgres        LaporanProgres[]
  penanggungJawab       User             @relation(fields: [penanggungJawabId], references: [id])
  proposalAsal          ProgramProposal  @relation(fields: [proposalAsalId], references: [id])

  @@index([penanggungJawabId])
}

model LaporanProgres {
  id          String      @id @default(cuid())
  tipeLaporan LaporanType
  data        Json
  programId   String
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   User        @relation(fields: [createdById], references: [id])
  program     Program     @relation(fields: [programId], references: [id])
}

model DokumenProgram {
  id           String      @id @default(cuid())
  namaDokumen  String
  tipeDokumen  DokumenType
  programId    String
  uploadedById String
  createdAt    DateTime    @default(now())
  kunciFile    String
  urlDokumen   String
  program      Program     @relation(fields: [programId], references: [id])
  uploadedBy   User        @relation(fields: [uploadedById], references: [id])
}

model AIApiKey {
  id              String       @id @default(cuid())
  name            String
  provider        AIProvider
  apiKey          String
  baseUrl         String?
  isActive        Boolean      @default(true)
  availableModels String[]
  createdById     String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  createdBy       User         @relation(fields: [createdById], references: [id])
  prompts         AIPrompt[]
  usageLogs       AIUsageLog[]
}

model AIPrompt {
  id           String         @id @default(cuid())
  name         String
  description  String?
  systemPrompt String
  userPrompt   String
  apiKeyId     String
  model        String
  temperature  Float          @default(0.7)
  maxTokens    Int            @default(1000)
  category     PromptCategory @default(GENERAL)
  isActive     Boolean        @default(true)
  createdById  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  apiKey       AIApiKey       @relation(fields: [apiKeyId], references: [id])
  createdBy    User           @relation(fields: [createdById], references: [id])
  usageLogs    AIUsageLog[]
}

model AIUsageLog {
  id             String        @id @default(cuid())
  promptId       String?
  apiKeyId       String?
  model          String
  provider       AIProvider
  userId         String?
  userAgent      String?
  ipAddress      String?
  requestTokens  Int?
  responseTokens Int?
  totalTokens    Int?
  responseTime   Int
  status         RequestStatus @default(SUCCESS)
  errorMessage   String?
  createdAt      DateTime      @default(now())
  apiKey         AIApiKey?     @relation(fields: [apiKeyId], references: [id])
  prompt         AIPrompt?     @relation(fields: [promptId], references: [id])
  user           User?         @relation(fields: [userId], references: [id])
}

enum TjslPillar {
  PENDIDIKAN
  LINGKUNGAN
  PENGEMBANGAN_UMK
  SOSIAL_BUDAYA
}

enum Role {
  ADMIN
  USER
}

enum ProposalStatus {
  DRAFT
  DIAJUKAN
  DISETUJUI
  DITOLAK
  SELESAI
  DIJALANKAN
}

enum ProgramStatus {
  BERJALAN
  SELESAI
  DITUNDA
  DIBATALKAN
}

enum LaporanType {
  PROGRES_RUTIN
  PENCAPAIAN_MILESTONE
  KEUANGAN
  INSIDEN_KENDALA
  KEGIATAN_KHUSUS
}

enum DokumenType {
  MoU
  PKS
  SURAT_RESMI
  DOKUMENTASI
  LAINNYA
}

enum AIProvider {
  OPENAI
  ANTHROPIC
  GOOGLE
  COHERE
  CUSTOM
}

enum PromptCategory {
  GENERAL
  PROPOSAL_ANALYSIS
  REPORT_GENERATION
  DATA_INSIGHTS
  DOCUMENT_SUMMARY
}

enum RequestStatus {
  SUCCESS
  ERROR
  TIMEOUT
  RATE_LIMITED
}
